{"version":3,"sources":["components/common/FormsControls/FormsControls.js","components/common/FormsControls/FormsControls.module.css","utils/validators/validators.js","components/Dialogs/Dialogs.module.css","components/Dialogs/Messages/Message.module.css","components/Dialogs/Dialog/Dialog.module.css","components/Dialogs/Messages/AddMessageForm.module.css","hoc/WithAuthRedirect.js","components/Dialogs/Messages/Message.jsx","components/Dialogs/Dialog/Dialog.jsx","components/Dialogs/Messages/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["FormControl","input","meta","touched","error","children","hasError","className","s","formControl","absoluteNote","Textarea","props","restProps","child","Input","createField","name","type","placeholder","validator","component","style","additionalComponent","validate","module","exports","required","value","maxLengthCreator","maxLength","length","mapStateToProps","state","isAuth","auth","isFetching","fetchAnim","Message","incomingMessage","avaSmall","src","alt","nameField","id","messageText","message","Dialog","path","dialog","gridDiv","dialogAva","to","activeClassName","active","maxLength200","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","newMessageForm","Field","Dialogs","dialogs","dialogsPage","dialogsData","map","d","messagesList","messages","m","dialogsList","newMessageTextbox","values","sendMessage","newMessageText","compose","connect","dispatch","Component","RedirectComponent","this","React"],"mappings":"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","file":"static/js/5.a8e2d6f5.chunk.js","sourcesContent":["import s from './FormsControls.module.css';\r\nimport { Field } from 'redux-form';\r\n\r\nconst FormControl = ({ input, meta: {touched, error}, children, ...props }) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={s.formControl + \" \" + s.error}>\r\n            <div className={s.absoluteNote}>\r\n                {hasError && <span>{error}</span>}\r\n            </div>\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    const { input, meta, child, ...restProps } = props;\r\n    return <FormControl {...props}><textarea  {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const { input, meta, child, ...restProps } = props;\r\n    return <FormControl {...props}><input  {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const createField = (name, type, placeholder, validator, component, style, additionalComponent) => (\r\n    <div className={style}>\r\n        <Field\r\n            name={name}\r\n            type={type}\r\n            placeholder={placeholder}\r\n            validate={validator}\r\n            component={component}\r\n        />\r\n        {additionalComponent}\r\n    </div>\r\n)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2g2UO\",\"absoluteNote\":\"FormsControls_absoluteNote__J9h8j\",\"error\":\"FormsControls_error__3XU8k\"};","export const required = value => {\r\n    if(value) return undefined;\r\n    return 'Обязательное поле';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if(value.length > maxLength) return `Максимальная длина - ${maxLength} символов`;\r\n    return undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messagesList\":\"Dialogs_messagesList__3g01p\",\"dialogsList\":\"Dialogs_dialogsList__2wjes\",\"dialog\":\"Dialogs_dialog__IEbEi\",\"active\":\"Dialogs_active__1EpqZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"incomingMessage\":\"Message_incomingMessage__35qR4\",\"avaSmall\":\"Message_avaSmall__ihuqq\",\"nameField\":\"Message_nameField__3Cua-\",\"messageText\":\"Message_messageText__2IcTC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__1s_oA\",\"dialogAva\":\"Dialog_dialogAva__K7zEp\",\"gridDiv\":\"Dialog_gridDiv__3mI4C\",\"active\":\"Dialog_active__1tizn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newMessageForm\":\"AddMessageForm_newMessageForm__1Wyy6\"};","import React from \"react\";\r\nimport { Redirect } from 'react-router';\r\nimport { connect } from 'react-redux';\r\nimport Preloader from '../components/common/preloader/preloader';\r\n\r\nlet mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    isFetching: state.fetchAnim.isFetching\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to={'/login'} />\r\n            return <> \r\n                {this.props.isFetching ? <Preloader /> : null}\r\n                <Component {...this.props} />\r\n            </>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToProps)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React from 'react';\r\nimport s from './Message.module.css';\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className={s.incomingMessage}>\r\n            <img className={s.avaSmall} src=\"/avatar_placeholder.png\" alt=\"ava\" />\r\n            <div className={s.nameField}>Message ID: {props.id}</div>\r\n            <div className={s.messageText}>{props.message}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Dialog.module.css';\r\n\r\nconst Dialog = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return (\r\n        <div className={s.dialog}>\r\n            <div className={s.gridDiv}><img src='/avatar_placeholder.png' alt='DialogAva' className={s.dialogAva}></img></div>\r\n            <NavLink to={path} activeClassName={s.active}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialog;","import React from 'react';\r\nimport s from './AddMessageForm.module.css';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\nimport { maxLengthCreator, required } from '../../../utils/validators/validators';\r\n\r\nconst maxLength200 = maxLengthCreator(200);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={s.newMessageForm}>\r\n            <Field\r\n                component={Textarea}\r\n                validate={[required, maxLength200]}\r\n                name={'newMessageText'}\r\n                placeholder={'Enter your message'} />\r\n            <button>\r\n                Отправить\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const AddMessageFormRedux = reduxForm({ form: 'dialogAddMessageForm' })(AddMessageForm)","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport Message from './Messages/Message';\r\nimport Dialog from './Dialog/Dialog';\r\nimport { AddMessageFormRedux } from './Messages/AddMessageForm';\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let dialogs = props.dialogsPage.dialogsData.map(d => <Dialog key={d.id} id={d.id} name={d.name} />);\r\n    let messagesList = props.dialogsPage.messages.map(m => <Message message={m.message} key={m.id} id={m.id} />);\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsList}>\r\n                {dialogs}\r\n            </div>\r\n            <div className={s.messagesList}>\r\n                {messagesList}\r\n            </div>\r\n            <AddMessageFormRedux className={s.newMessageTextbox} onSubmit={addNewMessage} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dialogs;","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../hoc/WithAuthRedirect';\r\nimport { sendMessage } from '../../redux/dialogsReducer';\r\nimport Dialogs from './Dialogs';\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageText) => {\r\n            dispatch(sendMessage(newMessageText));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}